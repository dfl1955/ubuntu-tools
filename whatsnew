#!/bin/bash

# This has nt yet been tested.

PVER=1.2

# This was heavily amended on 29th March 2019, to use apt-mark

#=====================================================================

# This program compares the installed packages with a manifest and 
# produces a list of the newly installed packages i.e. those that I
# have installed.

# It declares functions, analyses the switches. checks that it has
# the privileges and resources it requires and then performs its work

#=====================================================================
#
# functions

. ./dfl1955_functions

mkwd()
{
	# makes a 777 folder
	mkdir -p  $1
	chmod -R 777 ${1}

# maybe put this in a loop use $* move it to the functions file
}

showinstallednonauto()
{
	#showinstallednonauto
	comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
}
# difverbose() ; # display if verbose

case `whoami` in
root) 	:; ;;
*)	superuser=false; echo I am not root; exit -1; ;;
esac

# set's the results directory

# this would be cool if could vary this as a parameter to the install mode code
ROOTDIR=/opt/local
WORKDIR=${ROOTDIR}/var/whatsnew

case $( [[ -d ${WORKDIR} ]]) in
true)	resultsdir=true; ;;
false)	resultsdir=false ; echo $WORKDIR does not exist, you must run whatsnew -i ; ;;
esac

oninstall=${WORKDIR}/oninstall.1word
foundpkgs=${WORKDIR}/found.1word
afterthought=${WORKDIR}/afterthought.lis

#wos()
#{
#	distroname -1 
#}
 
WOS=`distroname -1` 
#echo $WOS

# this program requires curl, I could use apt-cache policy to make the check,
# but I chose to use 'which'. curl is not now mandatory

if [ $( which curl | wc -l ) -eq 0 ];then
	echo curl is not installed, please install it
	exit 3
fi

# also needs dpkg & cut & awk

exit

#=====================================================================

pname=$0
usage="$0  -ivshc "
verbose=false

# I need a install, verbose, clean, help and show switch

while getopts ivshmc opt
do
case $opt in
-i|i)	# this is the install leg
	# needs to be root
	echo $pname $VNAME $VER ... in install results directory
	if [ ! -d ${WORKDIR} ];then
		echo There is no ${WORKDIR} on this system, I\'ll make you one.
		mkwd ${WORKDIR}
	else
		echo ${WORKDIR} already exists on this system
	fi
	exit
	;;
-m|m)	# forces a manifest retrieve
	echo not yet ready
	exit
	;;
-h|h) 	echo $usage; exit
	;;
-v|v) 	# this is the verbose leg
	verbose=true
	echo $pname $VNAME $VER ... in verbose mode
	WOS=`distroname -1` ; echo OS is $WOS
	;;
-c|c)	# this is the clean files leg
	cleanresults=true
	rm ${remotemanifest} ${oninstall} ${foundpkgs}  ${afterthought}
	exit
	;;
-s|s)	# this is the show leg
	echo $pname $VNAME $VER ... show results
	;;
*)	echo $usage
	exit 1
	;;
esac
done

# needs some code to test cross validation of switches 
# i.e. not s && i

#=====================================================================
#
# This code assume ubuntu or more accuralty is known not to work with
# on the raspberry pi. It is used to derive the manifest file location

# VNAME=$( cat /etc/*release | grep CODENAME | cut -f2 -d'=' | uniq )
VNAME=$( listfiles | grep CODENAME | cut -f2 -d'=' | uniq )
# this now includes a directory on elementary
#VER=$( cat /etc/*release | grep RELEASE | cut -f2 -d'=' | uniq )
VER=$( listfiles | grep RELEASE | cut -f2 -d'=' | uniq )

#=====================================================================

# a couple more tests, are they needed

VERROR=0

if [ ! -d ${WORKDIR} ];then
	echo There is no ${WORKDIR} on this system, I\'ll make you one.
	# we could make it ourself
	VERROR=1
fi

if [ ${VERROR} -eq 1 ];then
	exit ${VERROR}
fi
 
#=====================================================================
# what am i, these lines will vary depending on what it runs on, they work
# for ubuntu & elementary


case `distroname - ` in 
elementary) : 
	if [[ ${verbose} == true ]];then
		# this isn't working properly
		echo elementary processing path
	fi
	showinstallednonauto
	exit 10
	;;
ubuntu) :
	[verbose] && echo ubuntu processing path
	VNAME=$( listfiles | grep CODENAME | cut -f2 -d'=' | uniq )
	VER=$( listfiles | grep RELEASE | cut -f2 -d'=' | uniq )
	remotemanifestname=ubuntu-${VER}-desktop-amd64.manifest
	fullremotename=http://releases.ubuntu.com/${VNAME}/${remotemanifestname}
	remotemanifest=${WORKDIR}/ubuntu-${VER}-desktop-amd64.manifest
	;;
raspbian|Raspbian) :
	if [[ ${verbose} == true ]];then
		# this isn't working properly
		echo raspbian processing path
	fi
	showinstallednonauto
	exit 10
	;;
*)	# other case
	if [[ ${verbose} == true ]];then
		echo raspbian processing path
	fi
	exit 10
	;;
esac

exit	
#=====================================================================
# main process path

get_remotemanifest()
{
# 	written for ubuntu; and only needed once; it should be part of
#	the ubuntu installation leg; another reason for a staus file in ./etc
	if [ $( which curl | wc -l ) -eq 0 ];then
		echo curl is not installed, please install it
		exit 3
	fi
	curl -o ${remotemanifest} -O $fullremotename 2>/dev/null
	cut -f1 ${remotemanifest} | sort > ${oninstall}
}
 
get_remotemanifest
# what have we got?
dpkg --get-selections | awk '$2 ~ /^(install|hold)/ { print $1 }' | sort > ${foundpkgs} 

comm -23 ${foundpkgs} ${oninstall} > ${afterthought}

# a verbose switch to display the after thoughts  file

lines=$( wc -l ${afterthought} | awk '{ print $1 }')
echo There are $lines  lines in the "afterthoughts" file

if [ $verbose == true ];then
	cat ${afterthought}
else
	echo The afterthoughts file is called ${afterthought}
fi

# cat /etc/*release | grep CODENAME | cut -f2 -d'=' | uniq 
