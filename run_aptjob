#!/bin/bash
#
# runs apt-get update/upgrade in batch wrapped in a log rotate
#

# this will need to run as superuser

if [ $(whoami) != 'root' ];then
	echo $0 needs superuser privilege
	exit 1
fi 

LOGDIR=/opt/local/var/apt  # this might be parameterised, but I am happy with this

case $1 in
-i|--install|install)	  :
	echo install routine
	#
	# are the necessary programs installed
	#
	for program in locate logrotate
	do
		echo looking for $program
		if [ $( which ${program} | wc -l ) -eq 0 ];then
			echo ${program} is not installed, please install it
			exit 2
		else
			echo $program found
			updatedb
		fi
	done
	#
	# make the lograte conf files and the working directory
	#
	model=apt_logrconf.model
	#
	# this won't work unless an updatedb has been run after the model has 
	# been installed
	#
	logconfmodel=$(locate ${model})
	# this beeds a if exists test on log conf model
	cat $logconfmodel
	if [ ! -d ${LOGDIR} ];then
		mkdir -p ${LOGDIR}
		# needs the logrotate conf files
		for mode in update upgrade
		do
			echo making $mode logrotate conf file
			logfile="${LOGDIR}/apt-${mode}.conf"
			echo ${logfile%.conf}.log \{ > ${logfile}
			cat  ${logconfmodel} >> ${logfile}
			cat ${logfile}
		done 
	fi
	echo the program $0 needs to be moved to a root path directory
	exit
	;;
-c|--check|check) :
	ls ${LOGDIR}
	exit
	;;
-x|--uninstall|uninstall) :
	echo -n uninstall
	if [  -d ${LOGDIR} ];then
		rm -rf ${LOGDIR}
	fi
	echo " " ... done
	exit
	;;
esac

dmesg()
{
	# dmesg errorcode program
	ecode=$1; shift
	if [ $ecode != 0 ];then
		echo $* Error Code $ecode
		exit 1
	fi
}

# echo calling apt 

#
# main process
#

for mode in update upgrade
do
	confile="${LOGDIR}/apt-${mode}.conf"
	logfile="${confile%.conf}.log"
	# echo $mode $confile $logfile
	logrotate  ${confile}
	nice apt-get -y $mode | tee ${logfile}
	# ls ${LOGDIR}
	dmesg $? apt-get may have failed
done
#
# perhaps an update db
#


